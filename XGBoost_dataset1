{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"colab":{"provenance":[{"file_id":"1rUVKk07zHgrcsqnarxer5SYR_ai7GAwD","timestamp":1713282335723},{"file_id":"1n492Z7nTgaDEqbwg_KX2LZCEeMvU8gCV","timestamp":1713271906268},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/pt2-time-series-forecasting-with-xgboost-d75594f8-f555-4488-86ab-7ed2fcac1328.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240415/auto/storage/goog4_request&X-Goog-Date=20240415T142350Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=c4097ec783c1a14a3126eb661060ed19cc70539f0f8fe4e4a664a11abedb2cbf5c1c6f46ee317a77557c13dbd6699853efc376d4fb2a7fde4748b0a9b33326c0d1457a670a27b73e1e391c865cc6574f47d2aa598b53b6d51d73eb6ec977f9375858de186358002386a304cd3edb0496d43a695a40d861eb63940d3e03a029c728a6f4cea0b0c8ba4f64cc95529014ab08e422464991578c1cb940a4d0c71588caf8fcebaeae9444d3df8b388e7920dfc8162fe80b11a4598d222c562eecbbcbeec0075d4b0287226875aa40887043f7e9a2bece1261fe56e49e259defc16964f8eca112e5efae37408e36246bd9a951194f47031f2d7ebb8e1d1d19fb0525db","timestamp":1713192571882}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import xgboost as xgb\n","from sklearn.metrics import mean_squared_error\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","\n","data = pd.read_excel('/content/gdrive/My Drive/ML Project/processed_dataset.xlsx')\n","data = data.set_index('Datetime')\n","data.index = pd.to_datetime(data.index)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T20:06:56.054744Z","iopub.execute_input":"2022-08-01T20:06:56.055251Z","iopub.status.idle":"2022-08-01T20:06:57.191219Z","shell.execute_reply.started":"2022-08-01T20:06:56.055152Z","shell.execute_reply":"2022-08-01T20:06:57.190146Z"},"trusted":true,"id":"twz2VrrwI0b5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713287617165,"user_tz":-330,"elapsed":35385,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"f9d7c18c-71e9-4459-ef5f-04f7f2f8dd91"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["data.head()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T20:47:55.649301Z","iopub.execute_input":"2022-08-01T20:47:55.649925Z","iopub.status.idle":"2022-08-01T20:47:55.896973Z","shell.execute_reply.started":"2022-08-01T20:47:55.649882Z","shell.execute_reply":"2022-08-01T20:47:55.895464Z"},"trusted":true,"id":"LKulVa7NI0b6","executionInfo":{"status":"ok","timestamp":1713287617166,"user_tz":-330,"elapsed":13,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"colab":{"base_uri":"https://localhost:8080/","height":237},"outputId":"d46fae8b-cb6c-4ece-c4bf-536f015550c9"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     PJME_MW  PJME_MW_normalized\n","Datetime                                        \n","2002-01-01 01:00:00  30393.0            0.461150\n","2002-01-01 02:00:00  29265.0            0.426161\n","2002-01-01 03:00:00  28357.0            0.397996\n","2002-01-01 04:00:00  27899.0            0.383790\n","2002-01-01 05:00:00  28057.0            0.388691"],"text/html":["\n","  <div id=\"df-58b32bc8-0dd2-492c-a15b-2539f38220a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PJME_MW</th>\n","      <th>PJME_MW_normalized</th>\n","    </tr>\n","    <tr>\n","      <th>Datetime</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2002-01-01 01:00:00</th>\n","      <td>30393.0</td>\n","      <td>0.461150</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 02:00:00</th>\n","      <td>29265.0</td>\n","      <td>0.426161</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 03:00:00</th>\n","      <td>28357.0</td>\n","      <td>0.397996</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 04:00:00</th>\n","      <td>27899.0</td>\n","      <td>0.383790</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 05:00:00</th>\n","      <td>28057.0</td>\n","      <td>0.388691</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58b32bc8-0dd2-492c-a15b-2539f38220a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-58b32bc8-0dd2-492c-a15b-2539f38220a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-58b32bc8-0dd2-492c-a15b-2539f38220a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d0974d4c-86ef-4556-aa66-8b72425c98ce\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0974d4c-86ef-4556-aa66-8b72425c98ce')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d0974d4c-86ef-4556-aa66-8b72425c98ce button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data"}},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["# 1. Forecasting Horizon"],"metadata":{"id":"Z90LV-bWZFR1"}},{"cell_type":"code","source":["def create_features(data):\n","    \"\"\"\n","    Create time series features based on time series index.\n","    \"\"\"\n","    data = data.copy()\n","    data['hour'] = data.index.hour\n","    data['dayofweek'] = data.index.dayofweek\n","    data['quarter'] = data.index.quarter\n","    data['month'] = data.index.month\n","    data['year'] = data.index.year\n","    data['dayofyear'] = data.index.dayofyear\n","    data['dayofmonth'] = data.index.day\n","    data['weekofyear'] = data.index.isocalendar().week\n","    return data\n","\n","data = create_features(data)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:04:03.166197Z","iopub.execute_input":"2022-08-01T21:04:03.166751Z","iopub.status.idle":"2022-08-01T21:04:03.360967Z","shell.execute_reply.started":"2022-08-01T21:04:03.166711Z","shell.execute_reply":"2022-08-01T21:04:03.359392Z"},"trusted":true,"id":"JRoAjuGEI0b9","executionInfo":{"status":"ok","timestamp":1713287617166,"user_tz":-330,"elapsed":11,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# 2. Lag Features"],"metadata":{"id":"huqMYwBUZOxS"}},{"cell_type":"code","source":["def add_lags(data):\n","    target_map = data['PJME_MW_normalized'].to_dict()\n","    data['lag1'] = (data.index - pd.Timedelta('364 days')).map(target_map)\n","    data['lag2'] = (data.index - pd.Timedelta('728 days')).map(target_map)\n","    data['lag3'] = (data.index - pd.Timedelta('1092 days')).map(target_map)\n","    return data"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:08:07.781814Z","iopub.execute_input":"2022-08-01T21:08:07.782296Z","iopub.status.idle":"2022-08-01T21:08:07.791203Z","shell.execute_reply.started":"2022-08-01T21:08:07.782254Z","shell.execute_reply":"2022-08-01T21:08:07.789775Z"},"trusted":true,"id":"U9lglFmNI0b-","executionInfo":{"status":"ok","timestamp":1713287617166,"user_tz":-330,"elapsed":10,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["data = add_lags(data)\n","data.head()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:08:13.332464Z","iopub.execute_input":"2022-08-01T21:08:13.333676Z","iopub.status.idle":"2022-08-01T21:08:19.518906Z","shell.execute_reply.started":"2022-08-01T21:08:13.333621Z","shell.execute_reply":"2022-08-01T21:08:19.517487Z"},"trusted":true,"id":"vMOyOHLXI0b-","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1713287620920,"user_tz":-330,"elapsed":3764,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"fc042a16-d583-4356-b64e-e6fbc32d1a8f"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     PJME_MW  PJME_MW_normalized  hour  dayofweek  quarter  \\\n","Datetime                                                                     \n","2002-01-01 01:00:00  30393.0            0.461150     1          1        1   \n","2002-01-01 02:00:00  29265.0            0.426161     2          1        1   \n","2002-01-01 03:00:00  28357.0            0.397996     3          1        1   \n","2002-01-01 04:00:00  27899.0            0.383790     4          1        1   \n","2002-01-01 05:00:00  28057.0            0.388691     5          1        1   \n","\n","                     month  year  dayofyear  dayofmonth  weekofyear  lag1  \\\n","Datetime                                                                    \n","2002-01-01 01:00:00      1  2002          1           1           1   NaN   \n","2002-01-01 02:00:00      1  2002          1           1           1   NaN   \n","2002-01-01 03:00:00      1  2002          1           1           1   NaN   \n","2002-01-01 04:00:00      1  2002          1           1           1   NaN   \n","2002-01-01 05:00:00      1  2002          1           1           1   NaN   \n","\n","                     lag2  lag3  \n","Datetime                         \n","2002-01-01 01:00:00   NaN   NaN  \n","2002-01-01 02:00:00   NaN   NaN  \n","2002-01-01 03:00:00   NaN   NaN  \n","2002-01-01 04:00:00   NaN   NaN  \n","2002-01-01 05:00:00   NaN   NaN  "],"text/html":["\n","  <div id=\"df-d32f1c71-2101-40fe-84a9-b43d09635b79\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PJME_MW</th>\n","      <th>PJME_MW_normalized</th>\n","      <th>hour</th>\n","      <th>dayofweek</th>\n","      <th>quarter</th>\n","      <th>month</th>\n","      <th>year</th>\n","      <th>dayofyear</th>\n","      <th>dayofmonth</th>\n","      <th>weekofyear</th>\n","      <th>lag1</th>\n","      <th>lag2</th>\n","      <th>lag3</th>\n","    </tr>\n","    <tr>\n","      <th>Datetime</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2002-01-01 01:00:00</th>\n","      <td>30393.0</td>\n","      <td>0.461150</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2002</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 02:00:00</th>\n","      <td>29265.0</td>\n","      <td>0.426161</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2002</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 03:00:00</th>\n","      <td>28357.0</td>\n","      <td>0.397996</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2002</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 04:00:00</th>\n","      <td>27899.0</td>\n","      <td>0.383790</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2002</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2002-01-01 05:00:00</th>\n","      <td>28057.0</td>\n","      <td>0.388691</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2002</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d32f1c71-2101-40fe-84a9-b43d09635b79')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d32f1c71-2101-40fe-84a9-b43d09635b79 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d32f1c71-2101-40fe-84a9-b43d09635b79');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9ac5587b-bcd0-4a68-99af-60dca67e92a7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ac5587b-bcd0-4a68-99af-60dca67e92a7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9ac5587b-bcd0-4a68-99af-60dca67e92a7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["## Train Using Cross Validation"],"metadata":{"id":"CU8ldNvTI0b-"}},{"cell_type":"code","source":["!pip install bayesian-optimization\n","import xgboost as xgb\n","from sklearn.model_selection import TimeSeriesSplit\n","from sklearn.metrics import mean_squared_error\n","from bayes_opt import BayesianOptimization\n","from sklearn.model_selection import TimeSeriesSplit\n","\n","# Generate features using a rolling window approach\n","window_size = 24  # 24 lags to be taken as decided by ACF\n","for i in range(1, window_size + 1):\n","    data[f'lag_{i}'] = data['PJME_MW_normalized'].shift(i)\n","\n","# Drop rows with NaN values caused by shifting\n","data = data.dropna()\n","\n","# Define features and target\n","X = data[[f'lag_{i}' for i in range(1, window_size + 1)]]\n","y = data['PJME_MW_normalized']\n","\n","def mape(y_true, y_pred):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def xgb_evaluate(max_depth, gamma, colsample_bytree, subsample, min_child_weight, lambda_val, alpha):\n","    params = {\n","        'eval_metric': 'rmse',\n","        'max_depth': int(max_depth),\n","        'subsample': subsample,\n","        'eta': 0.1,\n","        'gamma': gamma,\n","        'colsample_bytree': colsample_bytree,\n","        'min_child_weight': min_child_weight,\n","        'lambda': lambda_val,\n","        'alpha': alpha\n","    }\n","\n","\n","    # Ensure to use TimeSeriesSplit for time series data\n","    cv = TimeSeriesSplit(n_splits=8,test_size = 250, gap = 7)\n","    cv_scores = np.empty(8)\n","\n","\n","    # fig, axs = plt.subplots(3, figsize=(20, 15))\n","    for idx, (train_idx, test_idx) in enumerate(cv.split(X)):\n","        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n","        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n","\n","        # Fit model\n","        model = xgb.XGBRegressor(**params, objective='reg:squarederror')\n","        model.fit(X_train, y_train)\n","        predictions = model.predict(X_test)\n","        cv_scores[idx] = mape(y_test, predictions)\n","\n","    return -np.mean(cv_scores)  # Negative RMSE for maximization\n","\n","TARGET = 'y'  # Assuming 'y' is your target variable\n","\n","bounds = {\n","    'max_depth': (1, 15),\n","    'gamma': (0, 5),\n","    'colsample_bytree': (0.3, 1.0),\n","    'subsample': (0.4, 1.0),\n","    'min_child_weight': (1, 10),\n","    'lambda_val':(0,10),\n","    'alpha': (0,1)\n","}\n","\n","optimizer = BayesianOptimization(f=xgb_evaluate, pbounds=bounds, random_state=42)\n","optimizer.maximize(init_points=10, n_iter=25)\n"],"metadata":{"id":"wBYNvJWwKo3r","outputId":"00e8cdd1-ae2e-4cba-ec8f-e4baf63dca27","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713288901893,"user_tz":-330,"elapsed":1280981,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting bayesian-optimization\n","  Downloading bayesian_optimization-1.4.3-py3-none-any.whl (18 kB)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.25.2)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.11.4)\n","Requirement already satisfied: scikit-learn>=0.18.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.2.2)\n","Collecting colorama>=0.4.6 (from bayesian-optimization)\n","  Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (1.4.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (3.4.0)\n","Installing collected packages: colorama, bayesian-optimization\n","Successfully installed bayesian-optimization-1.4.3 colorama-0.4.6\n","|   iter    |  target   |   alpha   | colsam... |   gamma   | lambda... | max_depth | min_ch... | subsample |\n","-------------------------------------------------------------------------------------------------------------\n","| \u001b[0m1        \u001b[0m | \u001b[0m-7.034   \u001b[0m | \u001b[0m0.3745   \u001b[0m | \u001b[0m0.9655   \u001b[0m | \u001b[0m3.66     \u001b[0m | \u001b[0m5.987    \u001b[0m | \u001b[0m3.184    \u001b[0m | \u001b[0m2.404    \u001b[0m | \u001b[0m0.4349   \u001b[0m |\n","| \u001b[95m2        \u001b[0m | \u001b[95m-6.719   \u001b[0m | \u001b[95m0.8662   \u001b[0m | \u001b[95m0.7208   \u001b[0m | \u001b[95m3.54     \u001b[0m | \u001b[95m0.2058   \u001b[0m | \u001b[95m14.58    \u001b[0m | \u001b[95m8.492    \u001b[0m | \u001b[95m0.5274   \u001b[0m |\n","| \u001b[95m3        \u001b[0m | \u001b[95m-6.225   \u001b[0m | \u001b[95m0.1818   \u001b[0m | \u001b[95m0.4284   \u001b[0m | \u001b[95m1.521    \u001b[0m | \u001b[95m5.248    \u001b[0m | \u001b[95m7.047    \u001b[0m | \u001b[95m3.621    \u001b[0m | \u001b[95m0.7671   \u001b[0m |\n","| \u001b[0m4        \u001b[0m | \u001b[0m-6.502   \u001b[0m | \u001b[0m0.1395   \u001b[0m | \u001b[0m0.5045   \u001b[0m | \u001b[0m1.832    \u001b[0m | \u001b[0m4.561    \u001b[0m | \u001b[0m11.99    \u001b[0m | \u001b[0m2.797    \u001b[0m | \u001b[0m0.7085   \u001b[0m |\n","| \u001b[0m5        \u001b[0m | \u001b[0m-9.585   \u001b[0m | \u001b[0m0.5924   \u001b[0m | \u001b[0m0.3325   \u001b[0m | \u001b[0m3.038    \u001b[0m | \u001b[0m1.705    \u001b[0m | \u001b[0m1.911    \u001b[0m | \u001b[0m9.54     \u001b[0m | \u001b[0m0.9794   \u001b[0m |\n","| \u001b[95m6        \u001b[0m | \u001b[95m-4.986   \u001b[0m | \u001b[95m0.8084   \u001b[0m | \u001b[95m0.5132   \u001b[0m | \u001b[95m0.4884   \u001b[0m | \u001b[95m6.842    \u001b[0m | \u001b[95m7.162    \u001b[0m | \u001b[95m2.098    \u001b[0m | \u001b[95m0.6971   \u001b[0m |\n","| \u001b[95m7        \u001b[0m | \u001b[95m-4.479   \u001b[0m | \u001b[95m0.03439  \u001b[0m | \u001b[95m0.9365   \u001b[0m | \u001b[95m1.294    \u001b[0m | \u001b[95m6.625    \u001b[0m | \u001b[95m5.364    \u001b[0m | \u001b[95m5.681    \u001b[0m | \u001b[95m0.728    \u001b[0m |\n","| \u001b[0m8        \u001b[0m | \u001b[0m-5.673   \u001b[0m | \u001b[0m0.1849   \u001b[0m | \u001b[0m0.9787   \u001b[0m | \u001b[0m3.876    \u001b[0m | \u001b[0m9.395    \u001b[0m | \u001b[0m13.53    \u001b[0m | \u001b[0m6.381    \u001b[0m | \u001b[0m0.9531   \u001b[0m |\n","| \u001b[95m9        \u001b[0m | \u001b[95m-4.202   \u001b[0m | \u001b[95m0.08849  \u001b[0m | \u001b[95m0.4372   \u001b[0m | \u001b[95m0.2261   \u001b[0m | \u001b[95m3.253    \u001b[0m | \u001b[95m6.441    \u001b[0m | \u001b[95m3.442    \u001b[0m | \u001b[95m0.8972   \u001b[0m |\n","| \u001b[0m10       \u001b[0m | \u001b[0m-6.612   \u001b[0m | \u001b[0m0.3568   \u001b[0m | \u001b[0m0.4967   \u001b[0m | \u001b[0m2.713    \u001b[0m | \u001b[0m1.409    \u001b[0m | \u001b[0m12.23    \u001b[0m | \u001b[0m1.671    \u001b[0m | \u001b[0m0.9921   \u001b[0m |\n","| \u001b[0m11       \u001b[0m | \u001b[0m-6.444   \u001b[0m | \u001b[0m0.03942  \u001b[0m | \u001b[0m0.8189   \u001b[0m | \u001b[0m4.138    \u001b[0m | \u001b[0m9.679    \u001b[0m | \u001b[0m13.46    \u001b[0m | \u001b[0m6.405    \u001b[0m | \u001b[0m0.718    \u001b[0m |\n","| \u001b[95m12       \u001b[0m | \u001b[95m-2.967   \u001b[0m | \u001b[95m0.4434   \u001b[0m | \u001b[95m0.5361   \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m3.779    \u001b[0m | \u001b[95m6.204    \u001b[0m | \u001b[95m2.621    \u001b[0m | \u001b[95m0.8915   \u001b[0m |\n","| \u001b[95m13       \u001b[0m | \u001b[95m-2.907   \u001b[0m | \u001b[95m0.7445   \u001b[0m | \u001b[95m0.6155   \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m2.918    \u001b[0m | \u001b[95m5.837    \u001b[0m | \u001b[95m1.904    \u001b[0m | \u001b[95m1.0      \u001b[0m |\n","| \u001b[95m14       \u001b[0m | \u001b[95m-2.261   \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m3.864    \u001b[0m | \u001b[95m6.876    \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m0.4      \u001b[0m |\n","| \u001b[95m15       \u001b[0m | \u001b[95m-1.939   \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m2.636    \u001b[0m | \u001b[95m7.865    \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m1.0      \u001b[0m |\n","| \u001b[0m16       \u001b[0m | \u001b[0m-2.199   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m0.3021   \u001b[0m | \u001b[0m7.828    \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.4      \u001b[0m |\n","| \u001b[0m17       \u001b[0m | \u001b[0m-6.28    \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m2.419    \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m6.628    \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.4      \u001b[0m |\n","| \u001b[0m18       \u001b[0m | \u001b[0m-2.707   \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m4.835    \u001b[0m | \u001b[0m8.321    \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m19       \u001b[0m | \u001b[0m-2.071   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m9.462    \u001b[0m | \u001b[0m7.887    \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m20       \u001b[0m | \u001b[0m-5.2     \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m3.085    \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m6.281    \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m21       \u001b[0m | \u001b[0m-2.005   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m8.375    \u001b[0m | \u001b[0m7.099    \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m22       \u001b[0m | \u001b[0m-1.95    \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m8.689    \u001b[0m | \u001b[0m11.68    \u001b[0m | \u001b[0m9.462    \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[95m23       \u001b[0m | \u001b[95m-1.939   \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m10.0     \u001b[0m | \u001b[95m15.0     \u001b[0m | \u001b[95m10.0     \u001b[0m | \u001b[95m1.0      \u001b[0m |\n","| \u001b[0m24       \u001b[0m | \u001b[0m-1.939   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m6.318    \u001b[0m | \u001b[0m15.0     \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m25       \u001b[0m | \u001b[0m-1.953   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m8.386    \u001b[0m | \u001b[0m15.0     \u001b[0m | \u001b[0m6.482    \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m26       \u001b[0m | \u001b[0m-1.96    \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m15.0     \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m27       \u001b[0m | \u001b[0m-1.969   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m5.508    \u001b[0m | \u001b[0m9.683    \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m28       \u001b[0m | \u001b[0m-6.414   \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m29       \u001b[0m | \u001b[0m-1.962   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m11.69    \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[95m30       \u001b[0m | \u001b[95m-1.813   \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m1.0      \u001b[0m | \u001b[95m0.0      \u001b[0m | \u001b[95m7.475    \u001b[0m | \u001b[95m8.559    \u001b[0m | \u001b[95m8.289    \u001b[0m | \u001b[95m1.0      \u001b[0m |\n","| \u001b[0m31       \u001b[0m | \u001b[0m-2.982   \u001b[0m | \u001b[0m0.03647  \u001b[0m | \u001b[0m0.4525   \u001b[0m | \u001b[0m0.00593  \u001b[0m | \u001b[0m9.929    \u001b[0m | \u001b[0m13.45    \u001b[0m | \u001b[0m3.441    \u001b[0m | \u001b[0m0.6298   \u001b[0m |\n","| \u001b[0m32       \u001b[0m | \u001b[0m-9.544   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.3      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m33       \u001b[0m | \u001b[0m-1.959   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m0.0      \u001b[0m | \u001b[0m6.543    \u001b[0m | \u001b[0m15.0     \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m34       \u001b[0m | \u001b[0m-5.21    \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m3.112    \u001b[0m | \u001b[0m7.367    \u001b[0m | \u001b[0m15.0     \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","| \u001b[0m35       \u001b[0m | \u001b[0m-5.706   \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m4.102    \u001b[0m | \u001b[0m10.0     \u001b[0m | \u001b[0m15.0     \u001b[0m | \u001b[0m1.0      \u001b[0m | \u001b[0m1.0      \u001b[0m |\n","=============================================================================================================\n"]}]},{"cell_type":"code","source":["print(optimizer.max['params'])\n","# Train the model with the best parameters found\n","best_params = {k: int(v) if k == 'max_depth' else v for k, v in optimizer.max['params'].items()}\n","model = xgb.XGBRegressor(**best_params, objective='reg:squarederror')\n","model.fit(X, y)  # Training on the full dataset or consider using a separate test set"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":354},"id":"k3JnfnqEX8vB","executionInfo":{"status":"ok","timestamp":1713288908519,"user_tz":-330,"elapsed":6670,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"50deaa58-198c-452c-eb12-36540873f3fb"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["{'alpha': 0.0, 'colsample_bytree': 1.0, 'gamma': 0.0, 'lambda_val': 7.474787525526936, 'max_depth': 8.559462535728208, 'min_child_weight': 8.288914406235918, 'subsample': 1.0}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:35:00] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(alpha=0.0, base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=1.0, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=0.0, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=7.474787525526936,\n","             learning_rate=None, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=8,\n","             max_leaves=None, min_child_weight=8.288914406235918, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","             n_jobs=None, ...)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(alpha=0.0, base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=1.0, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=0.0, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=7.474787525526936,\n","             learning_rate=None, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=8,\n","             max_leaves=None, min_child_weight=8.288914406235918, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","             n_jobs=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(alpha=0.0, base_score=None, booster=None, callbacks=None,\n","             colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=1.0, device=None, early_stopping_rounds=None,\n","             enable_categorical=False, eval_metric=None, feature_types=None,\n","             gamma=0.0, grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=7.474787525526936,\n","             learning_rate=None, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=8,\n","             max_leaves=None, min_child_weight=8.288914406235918, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","             n_jobs=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["tss = TimeSeriesSplit(n_splits=8,test_size = 250, gap = 7)\n","data = data.sort_index()\n","\n","fold = 0\n","preds = []\n","scores = []\n","for train_idx, val_idx in tss.split(data):\n","    train = data.iloc[train_idx]\n","    test = data.iloc[val_idx]\n","\n","    train = create_features(train)\n","    test = create_features(test)\n","\n","    FEATURES = ['hour','dayofyear', 'dayofweek', 'quarter', 'month','year',\n","                'lag1','lag2','lag3']\n","    TARGET = 'PJME_MW_normalized'\n","\n","    X_train = train[FEATURES]\n","    y_train = train[TARGET]\n","\n","    X_test = test[FEATURES]\n","    y_test = test[TARGET]\n","\n","    reg = xgb.XGBRegressor(base_score=0.5,\n","                       booster='gbtree',\n","                       n_estimators=1000,\n","                       early_stopping_rounds=50,\n","                       objective='reg:squarederror',\n","                       max_depth=9,  # Best value found\n","                       learning_rate=0.01,\n","                       colsample_bytree=1.0,  # Best value found\n","                       gamma=0.0,  # Best value found\n","                       min_child_weight=8.288914406235918,  # Best value found\n","                       subsample=1.0,\n","                       alpha=0.0,\n","                       lambda_val=7.474787525526936)  # Best value found\n","\n","    reg.fit(X_train, y_train,\n","            eval_set=[(X_train, y_train), (X_test, y_test)],\n","            verbose=100)\n","\n","    y_pred = reg.predict(X_test)\n","    preds.append(y_pred)\n","    score = mape(y_test, y_pred)  # Calculate MAPE instead of RMSE\n","    scores.append(score)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:11:18.018074Z","iopub.execute_input":"2022-08-01T21:11:18.01865Z","iopub.status.idle":"2022-08-01T21:13:45.444232Z","shell.execute_reply.started":"2022-08-01T21:11:18.018607Z","shell.execute_reply":"2022-08-01T21:13:45.442166Z"},"trusted":true,"id":"pGgbjaIbI0b-","executionInfo":{"status":"ok","timestamp":1713289262630,"user_tz":-330,"elapsed":82542,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"b5cc794f-3de7-4ee4-b539-93db90062141","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tvalidation_0-rmse:0.18987\tvalidation_1-rmse:0.18577\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:39:38] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10808\tvalidation_1-rmse:0.08807\n","[200]\tvalidation_0-rmse:0.08366\tvalidation_1-rmse:0.06542\n","[300]\tvalidation_0-rmse:0.07429\tvalidation_1-rmse:0.06182\n","[400]\tvalidation_0-rmse:0.06872\tvalidation_1-rmse:0.06007\n","[436]\tvalidation_0-rmse:0.06727\tvalidation_1-rmse:0.06082\n","[0]\tvalidation_0-rmse:0.18986\tvalidation_1-rmse:0.16890\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:39:51] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10801\tvalidation_1-rmse:0.11842\n","[200]\tvalidation_0-rmse:0.08365\tvalidation_1-rmse:0.10849\n","[276]\tvalidation_0-rmse:0.07621\tvalidation_1-rmse:0.10830\n","[0]\tvalidation_0-rmse:0.18982\tvalidation_1-rmse:0.17420\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:40:00] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10802\tvalidation_1-rmse:0.13274\n","[191]\tvalidation_0-rmse:0.08496\tvalidation_1-rmse:0.13299\n","[0]\tvalidation_0-rmse:0.18979\tvalidation_1-rmse:0.21945\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:40:04] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10806\tvalidation_1-rmse:0.13713\n","[200]\tvalidation_0-rmse:0.08387\tvalidation_1-rmse:0.11183\n","[300]\tvalidation_0-rmse:0.07486\tvalidation_1-rmse:0.10721\n","[400]\tvalidation_0-rmse:0.06897\tvalidation_1-rmse:0.10632\n","[433]\tvalidation_0-rmse:0.06748\tvalidation_1-rmse:0.10639\n","[0]\tvalidation_0-rmse:0.18986\tvalidation_1-rmse:0.24482\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:40:17] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10803\tvalidation_1-rmse:0.16914\n","[200]\tvalidation_0-rmse:0.08393\tvalidation_1-rmse:0.14930\n","[300]\tvalidation_0-rmse:0.07488\tvalidation_1-rmse:0.14507\n","[313]\tvalidation_0-rmse:0.07403\tvalidation_1-rmse:0.14472\n","[0]\tvalidation_0-rmse:0.18995\tvalidation_1-rmse:0.28593\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:40:25] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10812\tvalidation_1-rmse:0.16994\n","[200]\tvalidation_0-rmse:0.08378\tvalidation_1-rmse:0.14433\n","[300]\tvalidation_0-rmse:0.07452\tvalidation_1-rmse:0.13964\n","[400]\tvalidation_0-rmse:0.06878\tvalidation_1-rmse:0.13613\n","[439]\tvalidation_0-rmse:0.06715\tvalidation_1-rmse:0.13603\n","[0]\tvalidation_0-rmse:0.19024\tvalidation_1-rmse:0.23570\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:40:36] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10833\tvalidation_1-rmse:0.12132\n","[200]\tvalidation_0-rmse:0.08434\tvalidation_1-rmse:0.10535\n","[300]\tvalidation_0-rmse:0.07532\tvalidation_1-rmse:0.10413\n","[400]\tvalidation_0-rmse:0.06965\tvalidation_1-rmse:0.10315\n","[415]\tvalidation_0-rmse:0.06904\tvalidation_1-rmse:0.10312\n","[0]\tvalidation_0-rmse:0.19034\tvalidation_1-rmse:0.25190\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:40:48] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.10838\tvalidation_1-rmse:0.12590\n","[200]\tvalidation_0-rmse:0.08431\tvalidation_1-rmse:0.09539\n","[300]\tvalidation_0-rmse:0.07531\tvalidation_1-rmse:0.08805\n","[400]\tvalidation_0-rmse:0.06928\tvalidation_1-rmse:0.08633\n","[428]\tvalidation_0-rmse:0.06805\tvalidation_1-rmse:0.08668\n"]}]},{"cell_type":"code","source":["print(f'Score across folds {np.mean(scores):0.4f}')\n","print(f'Fold scores:{scores}')"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:15:00.268693Z","iopub.execute_input":"2022-08-01T21:15:00.269293Z","iopub.status.idle":"2022-08-01T21:15:00.277834Z","shell.execute_reply.started":"2022-08-01T21:15:00.269247Z","shell.execute_reply":"2022-08-01T21:15:00.276121Z"},"trusted":true,"id":"W6DHB8GAI0b-","executionInfo":{"status":"ok","timestamp":1713289262630,"user_tz":-330,"elapsed":37,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"1586128f-f9ca-4e50-bc10-cc4fbdc18d5f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Score across folds 18.0289\n","Fold scores:[10.320953900494104, 17.89476933840899, 31.051633706922395, 18.298749542763172, 20.2507450537006, 20.218869929044317, 15.787953459052051, 10.407913061155675]\n"]}]},{"cell_type":"markdown","source":["# 3. Predicting the Future\n","- Here we retrain on all the data\n","- To Predict the future we need an emtpy dataframe for future date ranges."],"metadata":{"id":"O3mpysDOI0b-"}},{"cell_type":"code","source":["# Retrain on all data\n","data = create_features(data)\n","\n","FEATURES = ['dayofyear', 'dayofweek', 'quarter', 'month', 'year',\n","            'lag1','lag2','lag3']\n","TARGET = 'PJME_MW_normalized'\n","\n","X_all = data[FEATURES]\n","y_all = data[TARGET]\n","\n","reg = xgb.XGBRegressor(base_score=0.5,\n","                       booster='gbtree',\n","                       n_estimators=1000,\n","                       early_stopping_rounds=50,\n","                       objective='reg:squarederror',\n","                       max_depth=1,  # Best value found\n","                       learning_rate=0.01,\n","                       colsample_bytree=0.5290769493376746,  # Best value found\n","                       gamma=2.5875884455185103,  # Best value found\n","                       min_child_weight=9.015218289252822,  # Best value found\n","                       subsample=0.7116674916934858,\n","                       alpha=0.4282958689696337,\n","                       lambda_val=9.814346607607472)  # Best value found\n","\n","reg.fit(X_all, y_all,\n","        eval_set=[(X_all, y_all)],\n","        verbose=100)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:18:30.324144Z","iopub.execute_input":"2022-08-01T21:18:30.325695Z","iopub.status.idle":"2022-08-01T21:18:59.40554Z","shell.execute_reply.started":"2022-08-01T21:18:30.325628Z","shell.execute_reply":"2022-08-01T21:18:59.404023Z"},"trusted":true,"id":"vh00xp2fI0b-","executionInfo":{"status":"ok","timestamp":1713289272034,"user_tz":-330,"elapsed":9438,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"3b3f90bf-abeb-42d0-f257-c38113fd343a","colab":{"base_uri":"https://localhost:8080/","height":511}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tvalidation_0-rmse:0.19118\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [17:41:01] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:0.14415\n","[200]\tvalidation_0-rmse:0.12439\n","[300]\tvalidation_0-rmse:0.11471\n","[400]\tvalidation_0-rmse:0.10999\n","[500]\tvalidation_0-rmse:0.10754\n","[600]\tvalidation_0-rmse:0.10618\n","[700]\tvalidation_0-rmse:0.10534\n","[800]\tvalidation_0-rmse:0.10479\n","[900]\tvalidation_0-rmse:0.10439\n","[999]\tvalidation_0-rmse:0.10415\n"]},{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(alpha=0.4282958689696337, base_score=0.5, booster='gbtree',\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=50, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=1000,\n","             n_jobs=None, ...)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(alpha=0.4282958689696337, base_score=0.5, booster=&#x27;gbtree&#x27;,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=50, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=1000,\n","             n_jobs=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(alpha=0.4282958689696337, base_score=0.5, booster=&#x27;gbtree&#x27;,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=50, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=1000,\n","             n_jobs=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["data.index.max()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:19:48.403927Z","iopub.execute_input":"2022-08-01T21:19:48.405296Z","iopub.status.idle":"2022-08-01T21:19:48.417098Z","shell.execute_reply.started":"2022-08-01T21:19:48.405244Z","shell.execute_reply":"2022-08-01T21:19:48.415823Z"},"trusted":true,"id":"eFrVS62II0b-","executionInfo":{"status":"ok","timestamp":1713289272036,"user_tz":-330,"elapsed":65,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"a4250616-751c-43cf-e465-d6a78390a380","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Timestamp('2018-08-03 00:00:00')"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# Create future dataframe\n","future = pd.date_range('2017-01-01','2017-04-24', freq='1d')\n","future_data = pd.DataFrame(index=future)\n","future_data['isFuture'] = True\n","data['isFuture'] = False\n","data_and_future = pd.concat([data, future_data])\n","data_and_future = create_features(data_and_future)\n","data_and_future = add_lags(data_and_future)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:21:46.554533Z","iopub.execute_input":"2022-08-01T21:21:46.555005Z","iopub.status.idle":"2022-08-01T21:21:46.575875Z","shell.execute_reply.started":"2022-08-01T21:21:46.554965Z","shell.execute_reply":"2022-08-01T21:21:46.574388Z"},"trusted":true,"id":"XRNt62lAI0b-","executionInfo":{"status":"ok","timestamp":1713289275723,"user_tz":-330,"elapsed":3749,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["future_w_features = data_and_future.query('isFuture').copy()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:22:43.042461Z","iopub.execute_input":"2022-08-01T21:22:43.042917Z","iopub.status.idle":"2022-08-01T21:22:43.060595Z","shell.execute_reply.started":"2022-08-01T21:22:43.042878Z","shell.execute_reply":"2022-08-01T21:22:43.059419Z"},"trusted":true,"id":"TEs1SdhLI0b_","executionInfo":{"status":"ok","timestamp":1713289275723,"user_tz":-330,"elapsed":36,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["## Predict the future"],"metadata":{"id":"Z8Hji02cI0b_"}},{"cell_type":"code","source":["future_w_features['pred'] = reg.predict(future_w_features[FEATURES])"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:23:32.03152Z","iopub.execute_input":"2022-08-01T21:23:32.032052Z","iopub.status.idle":"2022-08-01T21:23:32.070332Z","shell.execute_reply.started":"2022-08-01T21:23:32.031998Z","shell.execute_reply":"2022-08-01T21:23:32.069216Z"},"trusted":true,"id":"hCm8Xz8lI0b_","executionInfo":{"status":"ok","timestamp":1713289275724,"user_tz":-330,"elapsed":36,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["future_w_features['pred'].plot(figsize=(10, 5),\n","                               color='red',\n","                               ms=1,\n","                               lw=0.5,\n","                               title='Future Predictions')\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:23:52.293335Z","iopub.execute_input":"2022-08-01T21:23:52.293796Z","iopub.status.idle":"2022-08-01T21:23:52.786378Z","shell.execute_reply.started":"2022-08-01T21:23:52.293759Z","shell.execute_reply":"2022-08-01T21:23:52.785098Z"},"trusted":true,"id":"Er1pyNimI0b_","executionInfo":{"status":"ok","timestamp":1713289275724,"user_tz":-330,"elapsed":35,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"16f7e165-251e-4778-f911-b21ca0f2d22b","colab":{"base_uri":"https://localhost:8080/","height":484}},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_data = pd.read_excel('/content/gdrive/My Drive/test_dataset2.xlsx')\n","test_data = test_data.set_index('date')\n","test_data.index = pd.to_datetime(test_data.index)\n","aligned_data = test_data[test_data.index.isin(future_w_features.index)]\n","\n","mapes = []\n","for date in future_w_features.index:\n","    if date in aligned_data.index:\n","        y_pred = future_w_features.loc[date, 'pred']\n","        y_true = aligned_data.loc[date, 'PJME_MW_normalized']\n","        current_mape = mape(y_true, y_pred)\n","        mapes.append(current_mape)\n","\n","\n","# Calculate average MAPE\n","average_mape = sum(mapes) / len(mapes)\n","print(f\"Average MAPE: {average_mape}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1CG-3XNHTQg3","executionInfo":{"status":"ok","timestamp":1713282050810,"user_tz":-330,"elapsed":675,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"9ec12e70-6c0f-478f-b29b-494857165328"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Average MAPE: 55.93688584712289%\n"]}]}]}