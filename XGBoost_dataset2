{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"colab":{"provenance":[{"file_id":"1n492Z7nTgaDEqbwg_KX2LZCEeMvU8gCV","timestamp":1713271906268},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/pt2-time-series-forecasting-with-xgboost-d75594f8-f555-4488-86ab-7ed2fcac1328.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240415/auto/storage/goog4_request&X-Goog-Date=20240415T142350Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=c4097ec783c1a14a3126eb661060ed19cc70539f0f8fe4e4a664a11abedb2cbf5c1c6f46ee317a77557c13dbd6699853efc376d4fb2a7fde4748b0a9b33326c0d1457a670a27b73e1e391c865cc6574f47d2aa598b53b6d51d73eb6ec977f9375858de186358002386a304cd3edb0496d43a695a40d861eb63940d3e03a029c728a6f4cea0b0c8ba4f64cc95529014ab08e422464991578c1cb940a4d0c71588caf8fcebaeae9444d3df8b388e7920dfc8162fe80b11a4598d222c562eecbbcbeec0075d4b0287226875aa40887043f7e9a2bece1261fe56e49e259defc16964f8eca112e5efae37408e36246bd9a951194f47031f2d7ebb8e1d1d19fb0525db","timestamp":1713192571882}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import xgboost as xgb\n","from sklearn.metrics import mean_squared_error\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","\n","data = pd.read_excel('/content/gdrive/My Drive/processed_dataset2.xlsx')\n","data = data.set_index('date')\n","data.index = pd.to_datetime(data.index)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T20:06:56.054744Z","iopub.execute_input":"2022-08-01T20:06:56.055251Z","iopub.status.idle":"2022-08-01T20:06:57.191219Z","shell.execute_reply.started":"2022-08-01T20:06:56.055152Z","shell.execute_reply":"2022-08-01T20:06:57.190146Z"},"trusted":true,"id":"twz2VrrwI0b5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713281778082,"user_tz":-330,"elapsed":4483,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"675cc9ff-3e46-4bf5-bebb-35dac9e89da2"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["\n","data.head()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T20:47:55.649301Z","iopub.execute_input":"2022-08-01T20:47:55.649925Z","iopub.status.idle":"2022-08-01T20:47:55.896973Z","shell.execute_reply.started":"2022-08-01T20:47:55.649882Z","shell.execute_reply":"2022-08-01T20:47:55.895464Z"},"trusted":true,"id":"LKulVa7NI0b6","executionInfo":{"status":"ok","timestamp":1713281778083,"user_tz":-330,"elapsed":23,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"colab":{"base_uri":"https://localhost:8080/","height":237},"outputId":"e003f69d-2258-41e4-fe20-b88553ece03c"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            meantemp   humidity  wind_speed  meanpressure  meantemp_diff1  \\\n","date                                                                        \n","2013-01-02  7.400000  92.000000    2.980000   1017.800000       -2.600000   \n","2013-01-03  7.166667  87.000000    4.633333   1018.666667       -0.233333   \n","2013-01-04  8.666667  71.333333    1.233333   1017.166667        1.500000   \n","2013-01-05  6.000000  86.833333    3.700000   1016.500000       -2.666667   \n","2013-01-06  7.000000  82.800000    1.480000   1018.000000        1.000000   \n","\n","            meantemp_normalized  meantemp_diff1_normalized  \n","date                                                        \n","2013-01-02             0.042795                   0.464096  \n","2013-01-03             0.035662                   0.600964  \n","2013-01-04             0.081514                   0.701205  \n","2013-01-05             0.000000                   0.460241  \n","2013-01-06             0.030568                   0.672289  "],"text/html":["\n","  <div id=\"df-b9edb93c-404d-42e4-8366-fe20d3a59b19\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>meantemp</th>\n","      <th>humidity</th>\n","      <th>wind_speed</th>\n","      <th>meanpressure</th>\n","      <th>meantemp_diff1</th>\n","      <th>meantemp_normalized</th>\n","      <th>meantemp_diff1_normalized</th>\n","    </tr>\n","    <tr>\n","      <th>date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2013-01-02</th>\n","      <td>7.400000</td>\n","      <td>92.000000</td>\n","      <td>2.980000</td>\n","      <td>1017.800000</td>\n","      <td>-2.600000</td>\n","      <td>0.042795</td>\n","      <td>0.464096</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-03</th>\n","      <td>7.166667</td>\n","      <td>87.000000</td>\n","      <td>4.633333</td>\n","      <td>1018.666667</td>\n","      <td>-0.233333</td>\n","      <td>0.035662</td>\n","      <td>0.600964</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-04</th>\n","      <td>8.666667</td>\n","      <td>71.333333</td>\n","      <td>1.233333</td>\n","      <td>1017.166667</td>\n","      <td>1.500000</td>\n","      <td>0.081514</td>\n","      <td>0.701205</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-05</th>\n","      <td>6.000000</td>\n","      <td>86.833333</td>\n","      <td>3.700000</td>\n","      <td>1016.500000</td>\n","      <td>-2.666667</td>\n","      <td>0.000000</td>\n","      <td>0.460241</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-06</th>\n","      <td>7.000000</td>\n","      <td>82.800000</td>\n","      <td>1.480000</td>\n","      <td>1018.000000</td>\n","      <td>1.000000</td>\n","      <td>0.030568</td>\n","      <td>0.672289</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9edb93c-404d-42e4-8366-fe20d3a59b19')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b9edb93c-404d-42e4-8366-fe20d3a59b19 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b9edb93c-404d-42e4-8366-fe20d3a59b19');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-df229dd4-1823-4371-87ec-c9b127cdcd35\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df229dd4-1823-4371-87ec-c9b127cdcd35')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-df229dd4-1823-4371-87ec-c9b127cdcd35 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 1460,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2013-01-02 00:00:00\",\n        \"max\": \"2016-12-31 00:00:00\",\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          \"2015-06-13 00:00:00\",\n          \"2016-01-12 00:00:00\",\n          \"2014-02-19 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.330691226666758,\n        \"min\": 6.0,\n        \"max\": 38.7142857142857,\n        \"num_unique_values\": 617,\n        \"samples\": [\n          19.3333333333333,\n          20.6666666666666,\n          30.1666666666666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.738107319702177,\n        \"min\": 13.4285714285714,\n        \"max\": 98.0,\n        \"num_unique_values\": 896,\n        \"samples\": [\n          23.5,\n          38.75,\n          92.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.55776527411237,\n        \"min\": 0.0,\n        \"max\": 42.22,\n        \"num_unique_values\": 674,\n        \"samples\": [\n          13.3230769230769,\n          8.11249999999999,\n          5.78461538461538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meanpressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 180.35507179076706,\n        \"min\": -3.04166666666666,\n        \"max\": 7679.33333333333,\n        \"num_unique_values\": 626,\n        \"samples\": [\n          1003.0625,\n          998.8125,\n          1012.85714285714\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp_diff1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6667995622842011,\n        \"min\": -10.625,\n        \"max\": 6.6666666666666,\n        \"num_unique_values\": 677,\n        \"samples\": [\n          2.178947368421102,\n          1.928571428571502,\n          0.7380952380952017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp_normalized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22408226457059965,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 617,\n        \"samples\": [\n          0.4075691411935945,\n          0.4483260553129531,\n          0.7387190684133899\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp_diff1_normalized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09639322769836381,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 676,\n        \"samples\": [\n          0.5733086190917517,\n          0.5339070567986218,\n          0.4946643717728057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["# 1. Forecasting Horizon"],"metadata":{"id":"Z90LV-bWZFR1"}},{"cell_type":"code","source":["def create_features(data):\n","    \"\"\"\n","    Create time series features based on time series index.\n","    \"\"\"\n","    data = data.copy()\n","    data['dayofweek'] = data.index.dayofweek\n","    data['quarter'] = data.index.quarter\n","    data['month'] = data.index.month\n","    data['year'] = data.index.year\n","    data['dayofyear'] = data.index.dayofyear\n","    data['dayofmonth'] = data.index.day\n","    data['weekofyear'] = data.index.isocalendar().week\n","    return data\n","\n","data = create_features(data)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:04:03.166197Z","iopub.execute_input":"2022-08-01T21:04:03.166751Z","iopub.status.idle":"2022-08-01T21:04:03.360967Z","shell.execute_reply.started":"2022-08-01T21:04:03.166711Z","shell.execute_reply":"2022-08-01T21:04:03.359392Z"},"trusted":true,"id":"JRoAjuGEI0b9","executionInfo":{"status":"ok","timestamp":1713281778083,"user_tz":-330,"elapsed":20,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["# 2. Lag Features"],"metadata":{"id":"huqMYwBUZOxS"}},{"cell_type":"code","source":["def add_lags(data):\n","    target_map = data['meantemp'].to_dict()\n","    data['lag1'] = (data.index - pd.Timedelta('364 days')).map(target_map)\n","    data['lag2'] = (data.index - pd.Timedelta('728 days')).map(target_map)\n","    data['lag3'] = (data.index - pd.Timedelta('1092 days')).map(target_map)\n","    return data"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:08:07.781814Z","iopub.execute_input":"2022-08-01T21:08:07.782296Z","iopub.status.idle":"2022-08-01T21:08:07.791203Z","shell.execute_reply.started":"2022-08-01T21:08:07.782254Z","shell.execute_reply":"2022-08-01T21:08:07.789775Z"},"trusted":true,"id":"U9lglFmNI0b-","executionInfo":{"status":"ok","timestamp":1713281778083,"user_tz":-330,"elapsed":19,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["data = add_lags(data)\n","data.head()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:08:13.332464Z","iopub.execute_input":"2022-08-01T21:08:13.333676Z","iopub.status.idle":"2022-08-01T21:08:19.518906Z","shell.execute_reply.started":"2022-08-01T21:08:13.333621Z","shell.execute_reply":"2022-08-01T21:08:19.517487Z"},"trusted":true,"id":"vMOyOHLXI0b-","colab":{"base_uri":"https://localhost:8080/","height":344},"executionInfo":{"status":"ok","timestamp":1713281778801,"user_tz":-330,"elapsed":13,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"9a880a54-659a-4800-abfc-e0f178707ed0"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            meantemp   humidity  wind_speed  meanpressure  meantemp_diff1  \\\n","date                                                                        \n","2013-01-02  7.400000  92.000000    2.980000   1017.800000       -2.600000   \n","2013-01-03  7.166667  87.000000    4.633333   1018.666667       -0.233333   \n","2013-01-04  8.666667  71.333333    1.233333   1017.166667        1.500000   \n","2013-01-05  6.000000  86.833333    3.700000   1016.500000       -2.666667   \n","2013-01-06  7.000000  82.800000    1.480000   1018.000000        1.000000   \n","\n","            meantemp_normalized  meantemp_diff1_normalized  dayofweek  \\\n","date                                                                    \n","2013-01-02             0.042795                   0.464096          2   \n","2013-01-03             0.035662                   0.600964          3   \n","2013-01-04             0.081514                   0.701205          4   \n","2013-01-05             0.000000                   0.460241          5   \n","2013-01-06             0.030568                   0.672289          6   \n","\n","            quarter  month  year  dayofyear  dayofmonth  weekofyear  lag1  \\\n","date                                                                        \n","2013-01-02        1      1  2013          2           2           1   NaN   \n","2013-01-03        1      1  2013          3           3           1   NaN   \n","2013-01-04        1      1  2013          4           4           1   NaN   \n","2013-01-05        1      1  2013          5           5           1   NaN   \n","2013-01-06        1      1  2013          6           6           1   NaN   \n","\n","            lag2  lag3  \n","date                    \n","2013-01-02   NaN   NaN  \n","2013-01-03   NaN   NaN  \n","2013-01-04   NaN   NaN  \n","2013-01-05   NaN   NaN  \n","2013-01-06   NaN   NaN  "],"text/html":["\n","  <div id=\"df-91b4c9e5-6113-4099-942f-02fa9f2083a4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>meantemp</th>\n","      <th>humidity</th>\n","      <th>wind_speed</th>\n","      <th>meanpressure</th>\n","      <th>meantemp_diff1</th>\n","      <th>meantemp_normalized</th>\n","      <th>meantemp_diff1_normalized</th>\n","      <th>dayofweek</th>\n","      <th>quarter</th>\n","      <th>month</th>\n","      <th>year</th>\n","      <th>dayofyear</th>\n","      <th>dayofmonth</th>\n","      <th>weekofyear</th>\n","      <th>lag1</th>\n","      <th>lag2</th>\n","      <th>lag3</th>\n","    </tr>\n","    <tr>\n","      <th>date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2013-01-02</th>\n","      <td>7.400000</td>\n","      <td>92.000000</td>\n","      <td>2.980000</td>\n","      <td>1017.800000</td>\n","      <td>-2.600000</td>\n","      <td>0.042795</td>\n","      <td>0.464096</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-03</th>\n","      <td>7.166667</td>\n","      <td>87.000000</td>\n","      <td>4.633333</td>\n","      <td>1018.666667</td>\n","      <td>-0.233333</td>\n","      <td>0.035662</td>\n","      <td>0.600964</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-04</th>\n","      <td>8.666667</td>\n","      <td>71.333333</td>\n","      <td>1.233333</td>\n","      <td>1017.166667</td>\n","      <td>1.500000</td>\n","      <td>0.081514</td>\n","      <td>0.701205</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-05</th>\n","      <td>6.000000</td>\n","      <td>86.833333</td>\n","      <td>3.700000</td>\n","      <td>1016.500000</td>\n","      <td>-2.666667</td>\n","      <td>0.000000</td>\n","      <td>0.460241</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2013-01-06</th>\n","      <td>7.000000</td>\n","      <td>82.800000</td>\n","      <td>1.480000</td>\n","      <td>1018.000000</td>\n","      <td>1.000000</td>\n","      <td>0.030568</td>\n","      <td>0.672289</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2013</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91b4c9e5-6113-4099-942f-02fa9f2083a4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-91b4c9e5-6113-4099-942f-02fa9f2083a4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-91b4c9e5-6113-4099-942f-02fa9f2083a4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b071eb41-4dd7-4d5e-b4b6-2ae3cf07cdc0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b071eb41-4dd7-4d5e-b4b6-2ae3cf07cdc0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b071eb41-4dd7-4d5e-b4b6-2ae3cf07cdc0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 1460,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2013-01-02 00:00:00\",\n        \"max\": \"2016-12-31 00:00:00\",\n        \"num_unique_values\": 1460,\n        \"samples\": [\n          \"2015-06-13 00:00:00\",\n          \"2016-01-12 00:00:00\",\n          \"2014-02-19 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.330691226666758,\n        \"min\": 6.0,\n        \"max\": 38.7142857142857,\n        \"num_unique_values\": 617,\n        \"samples\": [\n          19.3333333333333,\n          20.6666666666666,\n          30.1666666666666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.738107319702177,\n        \"min\": 13.4285714285714,\n        \"max\": 98.0,\n        \"num_unique_values\": 896,\n        \"samples\": [\n          23.5,\n          38.75,\n          92.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.55776527411237,\n        \"min\": 0.0,\n        \"max\": 42.22,\n        \"num_unique_values\": 674,\n        \"samples\": [\n          13.3230769230769,\n          8.11249999999999,\n          5.78461538461538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meanpressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 180.35507179076706,\n        \"min\": -3.04166666666666,\n        \"max\": 7679.33333333333,\n        \"num_unique_values\": 626,\n        \"samples\": [\n          1003.0625,\n          998.8125,\n          1012.85714285714\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp_diff1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6667995622842011,\n        \"min\": -10.625,\n        \"max\": 6.6666666666666,\n        \"num_unique_values\": 677,\n        \"samples\": [\n          2.178947368421102,\n          1.928571428571502,\n          0.7380952380952017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp_normalized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22408226457059965,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 617,\n        \"samples\": [\n          0.4075691411935945,\n          0.4483260553129531,\n          0.7387190684133899\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"meantemp_diff1_normalized\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09639322769836381,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 676,\n        \"samples\": [\n          0.5733086190917517,\n          0.5339070567986218,\n          0.4946643717728057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dayofweek\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quarter\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2014,\n          2016,\n          2013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dayofyear\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 366,\n        \"samples\": [\n          195,\n          35,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dayofmonth\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          29,\n          17,\n          25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekofyear\",\n      \"properties\": {\n        \"dtype\": \"UInt32\",\n        \"num_unique_values\": 53,\n        \"samples\": [\n          20,\n          42,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lag1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.407377246023624,\n        \"min\": 6.0,\n        \"max\": 38.7142857142857,\n        \"num_unique_values\": 387,\n        \"samples\": [\n          30.875,\n          29.75,\n          28.2857142857142\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lag2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.496251035775602,\n        \"min\": 6.0,\n        \"max\": 38.7142857142857,\n        \"num_unique_values\": 350,\n        \"samples\": [\n          30.5,\n          9.375,\n          29.235294117647\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lag3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.450798601252376,\n        \"min\": 6.0,\n        \"max\": 38.7142857142857,\n        \"num_unique_values\": 240,\n        \"samples\": [\n          16.0,\n          14.0,\n          28.625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["## Train Using Cross Validation"],"metadata":{"id":"CU8ldNvTI0b-"}},{"cell_type":"code","source":["!pip install bayesian-optimization\n","import xgboost as xgb\n","from sklearn.model_selection import TimeSeriesSplit\n","from sklearn.metrics import mean_squared_error\n","from bayes_opt import BayesianOptimization\n","from sklearn.model_selection import TimeSeriesSplit\n","\n","# Generate features using a rolling window approach\n","window_size = 60  # 60 lags to be taken as decided by ACF\n","for i in range(1, window_size + 1):\n","    data[f'lag_{i}'] = data['meantemp'].shift(i)\n","\n","# Drop rows with NaN values caused by shifting\n","data = data.dropna()\n","\n","# Define features and target\n","X = data[[f'lag_{i}' for i in range(1, window_size + 1)]]\n","y = data['meantemp']\n","\n","def mape(y_true, y_pred):\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def xgb_evaluate(max_depth, gamma, colsample_bytree, subsample, min_child_weight, lambda_val, alpha):\n","    params = {\n","        'eval_metric': 'rmse',\n","        'max_depth': int(max_depth),\n","        'subsample': subsample,\n","        'eta': 0.1,\n","        'gamma': gamma,\n","        'colsample_bytree': colsample_bytree,\n","        'min_child_weight': min_child_weight,\n","        'lambda': lambda_val,\n","        'alpha': alpha\n","    }\n","\n","\n","    # Ensure to use TimeSeriesSplit for time series data\n","    cv = TimeSeriesSplit(n_splits=3,test_size = 100, gap = 25)\n","    cv_scores = np.empty(3)\n","\n","\n","    # fig, axs = plt.subplots(3, figsize=(20, 15))\n","    for idx, (train_idx, test_idx) in enumerate(cv.split(X)):\n","        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n","        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n","\n","        # Fit model\n","        model = xgb.XGBRegressor(**params, objective='reg:squarederror')\n","        model.fit(X_train, y_train)\n","        predictions = model.predict(X_test)\n","        cv_scores[idx] = mape(y_test, predictions)\n","\n","    return -np.mean(cv_scores)  # Negative RMSE for maximization\n","\n","TARGET = 'y'  # Assuming 'y' is your target variable\n","\n","bounds = {\n","    'max_depth': (1, 15),\n","    'gamma': (0, 5),\n","    'colsample_bytree': (0.3, 1.0),\n","    'subsample': (0.4, 1.0),\n","    'min_child_weight': (1, 10),\n","    'lambda_val':(0,10),\n","    'alpha': (0,1)\n","}\n","\n","optimizer = BayesianOptimization(f=xgb_evaluate, pbounds=bounds, random_state=42)\n","optimizer.maximize(init_points=10, n_iter=25)\n"],"metadata":{"id":"wBYNvJWwKo3r","outputId":"82903018-336c-4c1a-b1c7-84ee61a5dd83","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1713281819988,"user_tz":-330,"elapsed":38554,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: bayesian-optimization in /usr/local/lib/python3.10/dist-packages (1.4.3)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.25.2)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.11.4)\n","Requirement already satisfied: scikit-learn>=0.18.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.2.2)\n","Requirement already satisfied: colorama>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (0.4.6)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (1.4.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (3.4.0)\n","|   iter    |  target   |   alpha   | colsam... |   gamma   | lambda... | max_depth | min_ch... | subsample |\n","-------------------------------------------------------------------------------------------------------------\n","| \u001b[0m1        \u001b[0m | \u001b[0m-26.13   \u001b[0m | \u001b[0m0.3745   \u001b[0m | \u001b[0m0.9655   \u001b[0m | \u001b[0m3.66     \u001b[0m | \u001b[0m5.987    \u001b[0m | \u001b[0m3.184    \u001b[0m | \u001b[0m2.404    \u001b[0m | \u001b[0m0.4349   \u001b[0m |\n","| \u001b[0m2        \u001b[0m | \u001b[0m-26.16   \u001b[0m | \u001b[0m0.8662   \u001b[0m | \u001b[0m0.7208   \u001b[0m | \u001b[0m3.54     \u001b[0m | \u001b[0m0.2058   \u001b[0m | \u001b[0m14.58    \u001b[0m | \u001b[0m8.492    \u001b[0m | \u001b[0m0.5274   \u001b[0m |\n","| \u001b[0m3        \u001b[0m | \u001b[0m-26.77   \u001b[0m | \u001b[0m0.1818   \u001b[0m | \u001b[0m0.4284   \u001b[0m | \u001b[0m1.521    \u001b[0m | \u001b[0m5.248    \u001b[0m | \u001b[0m7.047    \u001b[0m | \u001b[0m3.621    \u001b[0m | \u001b[0m0.7671   \u001b[0m |\n","| \u001b[95m4        \u001b[0m | \u001b[95m-25.18   \u001b[0m | \u001b[95m0.1395   \u001b[0m | \u001b[95m0.5045   \u001b[0m | \u001b[95m1.832    \u001b[0m | \u001b[95m4.561    \u001b[0m | \u001b[95m11.99    \u001b[0m | \u001b[95m2.797    \u001b[0m | \u001b[95m0.7085   \u001b[0m |\n","| \u001b[0m5        \u001b[0m | \u001b[0m-26.71   \u001b[0m | \u001b[0m0.5924   \u001b[0m | \u001b[0m0.3325   \u001b[0m | \u001b[0m3.038    \u001b[0m | \u001b[0m1.705    \u001b[0m | \u001b[0m1.911    \u001b[0m | \u001b[0m9.54     \u001b[0m | \u001b[0m0.9794   \u001b[0m |\n","| \u001b[0m6        \u001b[0m | \u001b[0m-27.27   \u001b[0m | \u001b[0m0.8084   \u001b[0m | \u001b[0m0.5132   \u001b[0m | \u001b[0m0.4884   \u001b[0m | \u001b[0m6.842    \u001b[0m | \u001b[0m7.162    \u001b[0m | \u001b[0m2.098    \u001b[0m | \u001b[0m0.6971   \u001b[0m |\n","| \u001b[0m7        \u001b[0m | \u001b[0m-26.17   \u001b[0m | \u001b[0m0.03439  \u001b[0m | \u001b[0m0.9365   \u001b[0m | \u001b[0m1.294    \u001b[0m | \u001b[0m6.625    \u001b[0m | \u001b[0m5.364    \u001b[0m | \u001b[0m5.681    \u001b[0m | \u001b[0m0.728    \u001b[0m |\n","| \u001b[0m8        \u001b[0m | \u001b[0m-26.6    \u001b[0m | \u001b[0m0.1849   \u001b[0m | \u001b[0m0.9787   \u001b[0m | \u001b[0m3.876    \u001b[0m | \u001b[0m9.395    \u001b[0m | \u001b[0m13.53    \u001b[0m | \u001b[0m6.381    \u001b[0m | \u001b[0m0.9531   \u001b[0m |\n","| \u001b[0m9        \u001b[0m | \u001b[0m-27.99   \u001b[0m | \u001b[0m0.08849  \u001b[0m | \u001b[0m0.4372   \u001b[0m | \u001b[0m0.2261   \u001b[0m | \u001b[0m3.253    \u001b[0m | \u001b[0m6.441    \u001b[0m | \u001b[0m3.442    \u001b[0m | \u001b[0m0.8972   \u001b[0m |\n","| \u001b[0m10       \u001b[0m | \u001b[0m-27.81   \u001b[0m | \u001b[0m0.3568   \u001b[0m | \u001b[0m0.4967   \u001b[0m | \u001b[0m2.713    \u001b[0m | \u001b[0m1.409    \u001b[0m | \u001b[0m12.23    \u001b[0m | \u001b[0m1.671    \u001b[0m | \u001b[0m0.9921   \u001b[0m |\n","| \u001b[0m11       \u001b[0m | \u001b[0m-27.0    \u001b[0m | \u001b[0m0.1034   \u001b[0m | \u001b[0m0.5059   \u001b[0m | \u001b[0m1.688    \u001b[0m | \u001b[0m5.102    \u001b[0m | \u001b[0m11.96    \u001b[0m | \u001b[0m2.986    \u001b[0m | \u001b[0m0.6624   \u001b[0m |\n","| \u001b[0m12       \u001b[0m | \u001b[0m-27.78   \u001b[0m | \u001b[0m0.06437  \u001b[0m | \u001b[0m0.3763   \u001b[0m | \u001b[0m4.482    \u001b[0m | \u001b[0m8.499    \u001b[0m | \u001b[0m11.53    \u001b[0m | \u001b[0m3.51     \u001b[0m | \u001b[0m0.6987   \u001b[0m |\n","| \u001b[0m13       \u001b[0m | \u001b[0m-26.24   \u001b[0m | \u001b[0m0.4257   \u001b[0m | \u001b[0m0.5386   \u001b[0m | \u001b[0m4.524    \u001b[0m | \u001b[0m4.725    \u001b[0m | \u001b[0m14.2     \u001b[0m | \u001b[0m3.675    \u001b[0m | \u001b[0m0.8082   \u001b[0m |\n","| \u001b[0m14       \u001b[0m | \u001b[0m-28.18   \u001b[0m | \u001b[0m0.9986   \u001b[0m | \u001b[0m0.3358   \u001b[0m | \u001b[0m3.913    \u001b[0m | \u001b[0m7.423    \u001b[0m | \u001b[0m12.09    \u001b[0m | \u001b[0m4.144    \u001b[0m | \u001b[0m0.6786   \u001b[0m |\n","| \u001b[0m15       \u001b[0m | \u001b[0m-27.12   \u001b[0m | \u001b[0m0.5561   \u001b[0m | \u001b[0m0.9326   \u001b[0m | \u001b[0m3.309    \u001b[0m | \u001b[0m2.305    \u001b[0m | \u001b[0m14.53    \u001b[0m | \u001b[0m4.565    \u001b[0m | \u001b[0m0.4166   \u001b[0m |\n","| \u001b[0m16       \u001b[0m | \u001b[0m-26.22   \u001b[0m | \u001b[0m0.8091   \u001b[0m | \u001b[0m0.4349   \u001b[0m | \u001b[0m4.254    \u001b[0m | \u001b[0m6.51     \u001b[0m | \u001b[0m10.28    \u001b[0m | \u001b[0m1.461    \u001b[0m | \u001b[0m0.6513   \u001b[0m |\n","| \u001b[0m17       \u001b[0m | \u001b[0m-28.1    \u001b[0m | \u001b[0m0.7097   \u001b[0m | \u001b[0m0.742    \u001b[0m | \u001b[0m4.009    \u001b[0m | \u001b[0m6.739    \u001b[0m | \u001b[0m12.83    \u001b[0m | \u001b[0m2.94     \u001b[0m | \u001b[0m0.976    \u001b[0m |\n","| \u001b[0m18       \u001b[0m | \u001b[0m-25.76   \u001b[0m | \u001b[0m0.1191   \u001b[0m | \u001b[0m0.9652   \u001b[0m | \u001b[0m4.842    \u001b[0m | \u001b[0m9.533    \u001b[0m | \u001b[0m13.95    \u001b[0m | \u001b[0m3.128    \u001b[0m | \u001b[0m0.6529   \u001b[0m |\n","| \u001b[0m19       \u001b[0m | \u001b[0m-26.59   \u001b[0m | \u001b[0m0.9763   \u001b[0m | \u001b[0m0.7899   \u001b[0m | \u001b[0m4.514    \u001b[0m | \u001b[0m4.447    \u001b[0m | \u001b[0m6.711    \u001b[0m | \u001b[0m3.164    \u001b[0m | \u001b[0m0.5074   \u001b[0m |\n","| \u001b[95m20       \u001b[0m | \u001b[95m-24.43   \u001b[0m | \u001b[95m0.4283   \u001b[0m | \u001b[95m0.5291   \u001b[0m | \u001b[95m2.588    \u001b[0m | \u001b[95m9.814    \u001b[0m | \u001b[95m1.236    \u001b[0m | \u001b[95m9.015    \u001b[0m | \u001b[95m0.7117   \u001b[0m |\n","| \u001b[0m21       \u001b[0m | \u001b[0m-28.45   \u001b[0m | \u001b[0m0.006474 \u001b[0m | \u001b[0m0.6381   \u001b[0m | \u001b[0m1.454    \u001b[0m | \u001b[0m5.863    \u001b[0m | \u001b[0m8.153    \u001b[0m | \u001b[0m2.437    \u001b[0m | \u001b[0m0.9799   \u001b[0m |\n","| \u001b[0m22       \u001b[0m | \u001b[0m-25.7    \u001b[0m | \u001b[0m0.7777   \u001b[0m | \u001b[0m0.8      \u001b[0m | \u001b[0m2.993    \u001b[0m | \u001b[0m0.26     \u001b[0m | \u001b[0m7.19     \u001b[0m | \u001b[0m6.125    \u001b[0m | \u001b[0m0.8054   \u001b[0m |\n","| \u001b[0m23       \u001b[0m | \u001b[0m-27.37   \u001b[0m | \u001b[0m0.3373   \u001b[0m | \u001b[0m0.9761   \u001b[0m | \u001b[0m0.473    \u001b[0m | \u001b[0m4.716    \u001b[0m | \u001b[0m14.62    \u001b[0m | \u001b[0m6.243    \u001b[0m | \u001b[0m0.8695   \u001b[0m |\n","| \u001b[0m24       \u001b[0m | \u001b[0m-26.23   \u001b[0m | \u001b[0m0.4942   \u001b[0m | \u001b[0m0.8651   \u001b[0m | \u001b[0m2.751    \u001b[0m | \u001b[0m9.527    \u001b[0m | \u001b[0m7.599    \u001b[0m | \u001b[0m9.465    \u001b[0m | \u001b[0m0.5888   \u001b[0m |\n","| \u001b[0m25       \u001b[0m | \u001b[0m-27.17   \u001b[0m | \u001b[0m0.7464   \u001b[0m | \u001b[0m0.5369   \u001b[0m | \u001b[0m2.266    \u001b[0m | \u001b[0m6.56     \u001b[0m | \u001b[0m9.761    \u001b[0m | \u001b[0m2.846    \u001b[0m | \u001b[0m0.8485   \u001b[0m |\n","| \u001b[0m26       \u001b[0m | \u001b[0m-28.05   \u001b[0m | \u001b[0m0.9385   \u001b[0m | \u001b[0m0.8535   \u001b[0m | \u001b[0m1.271    \u001b[0m | \u001b[0m6.951    \u001b[0m | \u001b[0m4.092    \u001b[0m | \u001b[0m6.837    \u001b[0m | \u001b[0m0.842    \u001b[0m |\n","| \u001b[0m27       \u001b[0m | \u001b[0m-27.79   \u001b[0m | \u001b[0m0.6729   \u001b[0m | \u001b[0m0.6478   \u001b[0m | \u001b[0m2.767    \u001b[0m | \u001b[0m2.695    \u001b[0m | \u001b[0m6.891    \u001b[0m | \u001b[0m3.204    \u001b[0m | \u001b[0m0.9947   \u001b[0m |\n","| \u001b[0m28       \u001b[0m | \u001b[0m-26.24   \u001b[0m | \u001b[0m0.5322   \u001b[0m | \u001b[0m0.8223   \u001b[0m | \u001b[0m2.572    \u001b[0m | \u001b[0m4.519    \u001b[0m | \u001b[0m8.911    \u001b[0m | \u001b[0m4.659    \u001b[0m | \u001b[0m0.4065   \u001b[0m |\n","| \u001b[0m29       \u001b[0m | \u001b[0m-25.7    \u001b[0m | \u001b[0m0.8379   \u001b[0m | \u001b[0m0.7149   \u001b[0m | \u001b[0m1.87     \u001b[0m | \u001b[0m2.785    \u001b[0m | \u001b[0m14.8     \u001b[0m | \u001b[0m4.759    \u001b[0m | \u001b[0m0.8524   \u001b[0m |\n","| \u001b[0m30       \u001b[0m | \u001b[0m-28.09   \u001b[0m | \u001b[0m0.329    \u001b[0m | \u001b[0m0.8064   \u001b[0m | \u001b[0m1.714    \u001b[0m | \u001b[0m6.094    \u001b[0m | \u001b[0m11.39    \u001b[0m | \u001b[0m1.206    \u001b[0m | \u001b[0m0.5183   \u001b[0m |\n","| \u001b[0m31       \u001b[0m | \u001b[0m-26.4    \u001b[0m | \u001b[0m0.4036   \u001b[0m | \u001b[0m0.7668   \u001b[0m | \u001b[0m4.985    \u001b[0m | \u001b[0m5.447    \u001b[0m | \u001b[0m3.83     \u001b[0m | \u001b[0m8.079    \u001b[0m | \u001b[0m0.5906   \u001b[0m |\n","| \u001b[0m32       \u001b[0m | \u001b[0m-27.11   \u001b[0m | \u001b[0m0.5925   \u001b[0m | \u001b[0m0.4529   \u001b[0m | \u001b[0m1.706    \u001b[0m | \u001b[0m3.679    \u001b[0m | \u001b[0m7.231    \u001b[0m | \u001b[0m9.961    \u001b[0m | \u001b[0m0.7471   \u001b[0m |\n","| \u001b[0m33       \u001b[0m | \u001b[0m-26.62   \u001b[0m | \u001b[0m0.06274  \u001b[0m | \u001b[0m0.9891   \u001b[0m | \u001b[0m1.154    \u001b[0m | \u001b[0m0.7324   \u001b[0m | \u001b[0m14.87    \u001b[0m | \u001b[0m8.9      \u001b[0m | \u001b[0m0.9313   \u001b[0m |\n","| \u001b[0m34       \u001b[0m | \u001b[0m-25.86   \u001b[0m | \u001b[0m0.5761   \u001b[0m | \u001b[0m0.6684   \u001b[0m | \u001b[0m2.404    \u001b[0m | \u001b[0m0.1144   \u001b[0m | \u001b[0m7.782    \u001b[0m | \u001b[0m5.534    \u001b[0m | \u001b[0m0.4178   \u001b[0m |\n","| \u001b[0m35       \u001b[0m | \u001b[0m-24.88   \u001b[0m | \u001b[0m0.8055   \u001b[0m | \u001b[0m0.9926   \u001b[0m | \u001b[0m0.9492   \u001b[0m | \u001b[0m1.558    \u001b[0m | \u001b[0m5.366    \u001b[0m | \u001b[0m4.671    \u001b[0m | \u001b[0m0.6404   \u001b[0m |\n","=============================================================================================================\n"]}]},{"cell_type":"code","source":["print(optimizer.max['params'])\n","# Train the model with the best parameters found\n","best_params = {k: int(v) if k == 'max_depth' else v for k, v in optimizer.max['params'].items()}\n","model = xgb.XGBRegressor(**best_params, objective='reg:squarederror')\n","model.fit(X, y)  # Training on the full dataset or consider using a separate test set"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":358},"id":"k3JnfnqEX8vB","executionInfo":{"status":"ok","timestamp":1713281918430,"user_tz":-330,"elapsed":719,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"7158d900-07ba-458a-acd0-6300a4b23a92"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["{'alpha': 0.4282958689696337, 'colsample_bytree': 0.5290769493376746, 'gamma': 2.5875884455185103, 'lambda_val': 9.814346607607472, 'max_depth': 1.2357195591033194, 'min_child_weight': 9.015218289252822, 'subsample': 0.7116674916934858}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [15:38:36] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(alpha=0.4282958689696337, base_score=None, booster=None,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=None, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=None, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","             n_jobs=None, ...)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(alpha=0.4282958689696337, base_score=None, booster=None,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=None, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=None, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","             n_jobs=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(alpha=0.4282958689696337, base_score=None, booster=None,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=None, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=None, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=None,\n","             n_jobs=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["tss = TimeSeriesSplit(n_splits=3, test_size=100, gap=25)\n","data = data.sort_index()\n","\n","fold = 0\n","preds = []\n","scores = []\n","for train_idx, val_idx in tss.split(data):\n","    train = data.iloc[train_idx]\n","    test = data.iloc[val_idx]\n","\n","    train = create_features(train)\n","    test = create_features(test)\n","\n","    FEATURES = ['dayofyear', 'dayofweek', 'quarter', 'month','year',\n","                'lag1','lag2','lag3']\n","    TARGET = 'meantemp'\n","\n","    X_train = train[FEATURES]\n","    y_train = train[TARGET]\n","\n","    X_test = test[FEATURES]\n","    y_test = test[TARGET]\n","\n","    reg = xgb.XGBRegressor(base_score=0.5,\n","                       booster='gbtree',\n","                       n_estimators=1000,\n","                       early_stopping_rounds=50,\n","                       objective='reg:squarederror',\n","                       max_depth=1,  # Best value found\n","                       learning_rate=0.01,\n","                       colsample_bytree=0.5290769493376746,  # Best value found\n","                       gamma=2.5875884455185103,  # Best value found\n","                       min_child_weight=9.015218289252822,  # Best value found\n","                       subsample=0.7116674916934858,\n","                       alpha=0.4282958689696337,\n","                       lambda_val=9.814346607607472)  # Best value found\n","\n","    reg.fit(X_train, y_train,\n","            eval_set=[(X_train, y_train), (X_test, y_test)],\n","            verbose=100)\n","\n","    y_pred = reg.predict(X_test)\n","    preds.append(y_pred)\n","    score = mape(y_test, y_pred)  # Calculate MAPE instead of RMSE\n","    scores.append(score)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:11:18.018074Z","iopub.execute_input":"2022-08-01T21:11:18.01865Z","iopub.status.idle":"2022-08-01T21:13:45.444232Z","shell.execute_reply.started":"2022-08-01T21:11:18.018607Z","shell.execute_reply":"2022-08-01T21:13:45.442166Z"},"trusted":true,"id":"pGgbjaIbI0b-","executionInfo":{"status":"ok","timestamp":1713282012139,"user_tz":-330,"elapsed":875,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"69776322-b1bd-4494-81c2-e0431a4f12d6","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tvalidation_0-rmse:14.79416\tvalidation_1-rmse:31.65275\n","[100]\tvalidation_0-rmse:5.90903\tvalidation_1-rmse:22.62347\n","[200]\tvalidation_0-rmse:2.87990\tvalidation_1-rmse:19.07615\n","[300]\tvalidation_0-rmse:1.94909\tvalidation_1-rmse:17.73241\n","[400]\tvalidation_0-rmse:1.65882\tvalidation_1-rmse:17.21233\n","[500]\tvalidation_0-rmse:1.54232\tvalidation_1-rmse:16.95108\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [15:40:09] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[600]\tvalidation_0-rmse:1.48301\tvalidation_1-rmse:16.83629\n","[700]\tvalidation_0-rmse:1.42786\tvalidation_1-rmse:16.81490\n","[781]\tvalidation_0-rmse:1.39809\tvalidation_1-rmse:16.80723\n","[0]\tvalidation_0-rmse:25.19146\tvalidation_1-rmse:30.86961\n","[100]\tvalidation_0-rmse:9.89006\tvalidation_1-rmse:11.52645\n","[200]\tvalidation_0-rmse:4.32491\tvalidation_1-rmse:3.98381\n","[300]\tvalidation_0-rmse:2.47434\tvalidation_1-rmse:2.09062\n","[359]\tvalidation_0-rmse:2.08361\tvalidation_1-rmse:2.24697\n","[0]\tvalidation_0-rmse:28.11358\tvalidation_1-rmse:23.74597\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [15:40:10] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n","/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [15:40:10] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:10.76493\tvalidation_1-rmse:8.82805\n","[200]\tvalidation_0-rmse:4.62426\tvalidation_1-rmse:3.49303\n","[300]\tvalidation_0-rmse:2.70870\tvalidation_1-rmse:1.94716\n","[400]\tvalidation_0-rmse:2.19014\tvalidation_1-rmse:1.71252\n","[494]\tvalidation_0-rmse:2.03382\tvalidation_1-rmse:1.70335\n"]}]},{"cell_type":"code","source":["print(f'Score across folds {np.mean(scores):0.4f}')\n","print(f'Fold scores:{scores}')"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:15:00.268693Z","iopub.execute_input":"2022-08-01T21:15:00.269293Z","iopub.status.idle":"2022-08-01T21:15:00.277834Z","shell.execute_reply.started":"2022-08-01T21:15:00.269247Z","shell.execute_reply":"2022-08-01T21:15:00.276121Z"},"trusted":true,"id":"W6DHB8GAI0b-","executionInfo":{"status":"ok","timestamp":1713282021788,"user_tz":-330,"elapsed":415,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"d8cec03f-e98c-4f5e-cd76-abb5bcdb0e45","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Score across folds 20.3667\n","Fold scores:[49.72616917126275, 5.367341613175921, 6.0067004563671675]\n"]}]},{"cell_type":"markdown","source":["# 3. Predicting the Future\n","- Here we retrain on all the data\n","- To Predict the future we need an emtpy dataframe for future date ranges."],"metadata":{"id":"O3mpysDOI0b-"}},{"cell_type":"code","source":["# Retrain on all data\n","data = create_features(data)\n","\n","FEATURES = ['dayofyear', 'dayofweek', 'quarter', 'month', 'year',\n","            'lag1','lag2','lag3']\n","TARGET = 'meantemp'\n","\n","X_all = data[FEATURES]\n","y_all = data[TARGET]\n","\n","reg = xgb.XGBRegressor(base_score=0.5,\n","                       booster='gbtree',\n","                       n_estimators=1000,\n","                       early_stopping_rounds=50,\n","                       objective='reg:squarederror',\n","                       max_depth=1,  # Best value found\n","                       learning_rate=0.01,\n","                       colsample_bytree=0.5290769493376746,  # Best value found\n","                       gamma=2.5875884455185103,  # Best value found\n","                       min_child_weight=9.015218289252822,  # Best value found\n","                       subsample=0.7116674916934858,\n","                       alpha=0.4282958689696337,\n","                       lambda_val=9.814346607607472)  # Best value found\n","\n","reg.fit(X_all, y_all,\n","        eval_set=[(X_all, y_all)],\n","        verbose=100)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:18:30.324144Z","iopub.execute_input":"2022-08-01T21:18:30.325695Z","iopub.status.idle":"2022-08-01T21:18:59.40554Z","shell.execute_reply.started":"2022-08-01T21:18:30.325628Z","shell.execute_reply":"2022-08-01T21:18:59.404023Z"},"trusted":true,"id":"vh00xp2fI0b-","executionInfo":{"status":"ok","timestamp":1713282035677,"user_tz":-330,"elapsed":2311,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"dcb2b193-8020-4184-934b-475c5c0ccc04","colab":{"base_uri":"https://localhost:8080/","height":511}},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\tvalidation_0-rmse:27.15703\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [15:40:31] WARNING: /workspace/src/learner.cc:742: \n","Parameters: { \"lambda_val\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["[100]\tvalidation_0-rmse:10.39418\n","[200]\tvalidation_0-rmse:4.46112\n","[300]\tvalidation_0-rmse:2.60948\n","[400]\tvalidation_0-rmse:2.10201\n","[500]\tvalidation_0-rmse:1.95066\n","[600]\tvalidation_0-rmse:1.88218\n","[700]\tvalidation_0-rmse:1.83997\n","[800]\tvalidation_0-rmse:1.81216\n","[900]\tvalidation_0-rmse:1.78989\n","[999]\tvalidation_0-rmse:1.77236\n"]},{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(alpha=0.4282958689696337, base_score=0.5, booster='gbtree',\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=50, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=1000,\n","             n_jobs=None, ...)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(alpha=0.4282958689696337, base_score=0.5, booster=&#x27;gbtree&#x27;,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=50, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=1000,\n","             n_jobs=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(alpha=0.4282958689696337, base_score=0.5, booster=&#x27;gbtree&#x27;,\n","             callbacks=None, colsample_bylevel=None, colsample_bynode=None,\n","             colsample_bytree=0.5290769493376746, device=None,\n","             early_stopping_rounds=50, enable_categorical=False,\n","             eval_metric=None, feature_types=None, gamma=2.5875884455185103,\n","             grow_policy=None, importance_type=None,\n","             interaction_constraints=None, lambda_val=9.814346607607472,\n","             learning_rate=0.01, max_bin=None, max_cat_threshold=None,\n","             max_cat_to_onehot=None, max_delta_step=None, max_depth=1,\n","             max_leaves=None, min_child_weight=9.015218289252822, missing=nan,\n","             monotone_constraints=None, multi_strategy=None, n_estimators=1000,\n","             n_jobs=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["data.index.max()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:19:48.403927Z","iopub.execute_input":"2022-08-01T21:19:48.405296Z","iopub.status.idle":"2022-08-01T21:19:48.417098Z","shell.execute_reply.started":"2022-08-01T21:19:48.405244Z","shell.execute_reply":"2022-08-01T21:19:48.415823Z"},"trusted":true,"id":"eFrVS62II0b-","executionInfo":{"status":"ok","timestamp":1713282041995,"user_tz":-330,"elapsed":459,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"bfc43d3e-c67f-4580-c670-82369d388632","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Timestamp('2016-12-31 00:00:00')"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# Create future dataframe\n","future = pd.date_range('2017-01-01','2017-04-24', freq='1d')\n","future_data = pd.DataFrame(index=future)\n","future_data['isFuture'] = True\n","data['isFuture'] = False\n","data_and_future = pd.concat([data, future_data])\n","data_and_future = create_features(data_and_future)\n","data_and_future = add_lags(data_and_future)"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:21:46.554533Z","iopub.execute_input":"2022-08-01T21:21:46.555005Z","iopub.status.idle":"2022-08-01T21:21:46.575875Z","shell.execute_reply.started":"2022-08-01T21:21:46.554965Z","shell.execute_reply":"2022-08-01T21:21:46.574388Z"},"trusted":true,"id":"XRNt62lAI0b-","executionInfo":{"status":"ok","timestamp":1713282043020,"user_tz":-330,"elapsed":4,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["future_w_features = data_and_future.query('isFuture').copy()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:22:43.042461Z","iopub.execute_input":"2022-08-01T21:22:43.042917Z","iopub.status.idle":"2022-08-01T21:22:43.060595Z","shell.execute_reply.started":"2022-08-01T21:22:43.042878Z","shell.execute_reply":"2022-08-01T21:22:43.059419Z"},"trusted":true,"id":"TEs1SdhLI0b_","executionInfo":{"status":"ok","timestamp":1713282043559,"user_tz":-330,"elapsed":4,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["## Predict the future"],"metadata":{"id":"Z8Hji02cI0b_"}},{"cell_type":"code","source":["future_w_features['pred'] = reg.predict(future_w_features[FEATURES])"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:23:32.03152Z","iopub.execute_input":"2022-08-01T21:23:32.032052Z","iopub.status.idle":"2022-08-01T21:23:32.070332Z","shell.execute_reply.started":"2022-08-01T21:23:32.031998Z","shell.execute_reply":"2022-08-01T21:23:32.069216Z"},"trusted":true,"id":"hCm8Xz8lI0b_","executionInfo":{"status":"ok","timestamp":1713282045710,"user_tz":-330,"elapsed":3,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["future_w_features['pred'].plot(figsize=(10, 5),\n","                               color='red',\n","                               ms=1,\n","                               lw=0.5,\n","                               title='Future Predictions')\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2022-08-01T21:23:52.293335Z","iopub.execute_input":"2022-08-01T21:23:52.293796Z","iopub.status.idle":"2022-08-01T21:23:52.786378Z","shell.execute_reply.started":"2022-08-01T21:23:52.293759Z","shell.execute_reply":"2022-08-01T21:23:52.785098Z"},"trusted":true,"id":"Er1pyNimI0b_","executionInfo":{"status":"ok","timestamp":1713282047142,"user_tz":-330,"elapsed":822,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"8fa6ffa5-a17d-4df2-9ff6-8c74a8ec4ed3","colab":{"base_uri":"https://localhost:8080/","height":484}},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_data = pd.read_excel('/content/gdrive/My Drive/test_dataset2.xlsx')\n","test_data = test_data.set_index('date')\n","test_data.index = pd.to_datetime(test_data.index)\n","aligned_data = test_data[test_data.index.isin(future_w_features.index)]\n","\n","mapes = []\n","for date in future_w_features.index:\n","    if date in aligned_data.index:\n","        y_pred = future_w_features.loc[date, 'pred']\n","        y_true = aligned_data.loc[date, 'meantemp']\n","        current_mape = mape(y_true, y_pred)\n","        mapes.append(current_mape)\n","\n","\n","# Calculate average MAPE\n","average_mape = sum(mapes) / len(mapes)\n","print(f\"Average MAPE: {average_mape}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1CG-3XNHTQg3","executionInfo":{"status":"ok","timestamp":1713282050810,"user_tz":-330,"elapsed":675,"user":{"displayName":"Aastha Bharill","userId":"03847361273858925441"}},"outputId":"9ec12e70-6c0f-478f-b29b-494857165328"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Average MAPE: 55.93688584712289%\n"]}]}]}